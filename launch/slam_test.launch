<launch>

  <!-- 
  possible types of SLAM:
  gmapping    - launch file for gmapping 
  hector_slam - launch file for hector_slam
  rtabmap     - launch file for rtabmap
  amcl        - launch file for amcl
  als         - launch file for als
  -->

  <param name="/use_sim_time" value="true"/>

  <arg name="SLAM_type"  default="gmapping"/>
  <arg name="bag_file"   default="new_mini_room"/>
  <arg name="scanner1"   default="/points2_front"/>
  <arg name="scanner2"   default="/points2_rear"/>
  <arg name="inter_rviz" default="true"/>

  <node name="rosbag" pkg="rosbag" type="play" output="log" args="--clock  $(find slam_benchmark)/bag/$(arg bag_file).bag" />

  <!-- run pointcloud_to_laserscan node -->
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan1">
      <remap from="cloud_in" to="$(arg scanner1)"/>
      <remap from="scan" to="$(arg scanner1)/scan"/>
      <rosparam>
          target_frame: lidar_front # Leave disabled to output scan in pointcloud frame
          transform_tolerance: 0.01
          min_height: 0.0
          max_height: 0.5
          angle_min: -2.36 # -3*M_PI/4
          angle_max: 2.36  # 3*M_PI/4
          angle_increment: 0.0043 # M_PI/720.0
          scan_time: 0.06666
          range_min: 0.20
          range_max: 20.0
          use_inf: false
          inf_epsilon: 1.0
          # Concurrency level, affects number of pointclouds queued for processing and number of threads used
          # 0 : Detect number of cores
          # 1 : Single threaded
          # 2->inf : Parallelism level
          concurrency_level: 1
      </rosparam>
  </node>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan2">
     <remap from="cloud_in" to="$(arg scanner2)"/>
     <remap from="scan" to="$(arg scanner2)/scan"/>
     <rosparam>
         target_frame: lidar_rear # Leave disabled to output scan in pointcloud frame
         transform_tolerance: 0.01
         min_height: 0.0
         max_height: 0.5
         angle_min: -2.36 # -3*M_PI/4
         angle_max: 2.36  # 3*M_PI/4
         angle_increment: 0.0043 # M_PI/720.0
         scan_time: 0.06666
         range_min: 0.20
         range_max: 20.0
         use_inf: false
         inf_epsilon: 1.0
         # Concurrency level, affects number of pointclouds queued for processing and number of threads used
         # 0 : Detect number of cores
         # 1 : Single threaded
         # 2->inf : Parallelism level
         concurrency_level: 1
     </rosparam>
  </node>

	<node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
    <param name="destination_frame" value="camera_top"/>
    <param name="cloud_destination_topic" value="/merged_cloud"/>
    <param name="scan_destination_topic" value="/scan_multi"/>
    <param name="laserscan_topics" value ="$(arg scanner1)/scan $(arg scanner2)/scan" /> <!-- LIST OF THE LASER SCAN TOPICS TO SUBSCRIBE -->
    <param name="angle_min" value="-3.14"/>
    <param name="angle_max" value="3.14"/>
    <param name="angle_increment" value="0.0043"/>
    <param name="scan_time" value="0.066666"/>
    <param name="range_min" value="0.30"/>
    <param name="range_max" value="20.0"/>
	</node>

  <group if="$(arg inter_rviz)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find slam_benchmark)/rviz/basic.rviz" />
  </group>

  <!-- some simple setting with gmapping -->
  <group if="$(eval SLAM_type == 'gmapping')">
      <include file="$(find slam_benchmark)/launch/$(arg SLAM_type).launch">
          <arg name="odom"                     value="odom"/>
          <arg name="transform_publish_period" value="0.5"/>
      </include>
  </group>

  <group if="$(eval SLAM_type == 'hector_slam')">
      <include file="$(find slam_benchmark)/launch/$(arg SLAM_type).launch">
      </include>
  </group>

  <!-- here rtabmap tune for imu and laser info. Don't use with map, odom frames -->
  <group if="$(eval SLAM_type == 'rtabmap')">
      <include file="$(find slam_benchmark)/launch/$(arg SLAM_type).launch">
      </include>
  </group>

  <group if="$(eval SLAM_type == 'amcl')">
      <include file="$(find slam_benchmark)/launch/$(arg SLAM_type).launch">
        <arg name="map_file" default="maps_combine.yaml"/>
      </include>
  </group>

  <group if="$(eval SLAM_type == 'als')">
      <include file="$(find slam_benchmark)/launch/$(arg SLAM_type).launch">
        <arg name="map_file" default="maps_combine.yaml"/>
      </include>
  </group>

</launch>